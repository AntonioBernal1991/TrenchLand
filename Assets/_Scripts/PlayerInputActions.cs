//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""cfb18093-5abf-4e52-b073-db02dfabd981"",
            ""actions"": [
                {
                    ""name"": ""CamerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""71a02abb-97d2-4882-8d46-cf7c139eb7b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamerRotate"",
                    ""type"": ""Value"",
                    ""id"": ""5fb02a0d-8b1f-4d41-ac5d-ac203841417f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CamerZoom"",
                    ""type"": ""Value"",
                    ""id"": ""10c52829-0d32-4fe5-bd30-011dbadf823f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1),Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""1b7024bd-9e8d-4468-b82b-b6d3ab3b8899"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b990d9f5-2000-4a63-817f-7219526cdc6c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9690aa0c-edb4-4a13-bf66-aa35fe7d4061"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e39a27a4-84b2-4661-9990-5750f5186124"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2b3272f9-c3f3-47ec-aa6d-6c0c8c0c25f0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""115e4b23-16e0-45df-b4c6-593bda424b1e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""72b7d569-9b54-43d9-9929-5b8ff4edc618"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerRotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3b698f0c-7053-457e-94d3-979d7d99aa3d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d31f7192-11f2-4b30-a48e-c257def7a689"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""91b47f5c-4b61-4df3-b685-148d43dfa637"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CamerZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c6a1d64-2896-466e-8bf1-7221df16b761"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_CamerMovement = m_Player.FindAction("CamerMovement", throwIfNotFound: true);
        m_Player_CamerRotate = m_Player.FindAction("CamerRotate", throwIfNotFound: true);
        m_Player_CamerZoom = m_Player.FindAction("CamerZoom", throwIfNotFound: true);
        m_Player_Click = m_Player.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_CamerMovement;
    private readonly InputAction m_Player_CamerRotate;
    private readonly InputAction m_Player_CamerZoom;
    private readonly InputAction m_Player_Click;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CamerMovement => m_Wrapper.m_Player_CamerMovement;
        public InputAction @CamerRotate => m_Wrapper.m_Player_CamerRotate;
        public InputAction @CamerZoom => m_Wrapper.m_Player_CamerZoom;
        public InputAction @Click => m_Wrapper.m_Player_Click;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @CamerMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerMovement;
                @CamerMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerMovement;
                @CamerMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerMovement;
                @CamerRotate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerRotate;
                @CamerRotate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerRotate;
                @CamerRotate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerRotate;
                @CamerZoom.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerZoom;
                @CamerZoom.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerZoom;
                @CamerZoom.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCamerZoom;
                @Click.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CamerMovement.started += instance.OnCamerMovement;
                @CamerMovement.performed += instance.OnCamerMovement;
                @CamerMovement.canceled += instance.OnCamerMovement;
                @CamerRotate.started += instance.OnCamerRotate;
                @CamerRotate.performed += instance.OnCamerRotate;
                @CamerRotate.canceled += instance.OnCamerRotate;
                @CamerZoom.started += instance.OnCamerZoom;
                @CamerZoom.performed += instance.OnCamerZoom;
                @CamerZoom.canceled += instance.OnCamerZoom;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnCamerMovement(InputAction.CallbackContext context);
        void OnCamerRotate(InputAction.CallbackContext context);
        void OnCamerZoom(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
